---
title: Admin tutorial
---

This page is a guided walk-thru of common administration activities and features:

* View health of each VM
* View health of each Redis container
* View logs of each Redis container
* Scale up and out to create more capacity

The section "Destroy all VMs and recover" is a very important section. **It is highly recommended** that all administrators practise this tutorial at least once so they are familiar and confident with the disaster recovery proceedings.

## Assumptions

It is assumed that you are continuing this tutorial after doing [User tutorial](usage-tutorial.html) and that there is a single `music-redis` service instance running.

If not, then:

```
cf create-service dingo-redis ready music-redis
```


## View health of VMs

As an administrator of Pivotal OpsManager, you can SSH into its VM and access the running Dingo Redis using the `bosh` CLI.

```
$ ssh ubuntu@OPS-MANAGER-FQDN
Password: ***********
```

Once inside, target the BOSH director and login:

```
bosh --ca-cert /var/tempest/workspaces/default/root_ca_certificate target OPS-MANAGER-DIRECTOR-IP
bosh login
```

To find the Dingo Redis deployment name:

```
bosh deployments
```

The output will look similar to:

```
+----------------------------------+-------------------------+
| Name                             | Release(s)              |
+----------------------------------+-------------------------+
| cf-cfe388ed8196d69ce46c          | cf/235.5.50             |
|                                  | ...                     |
+----------------------------------+-------------------------+
| dingo-redis-a7b288b79dc61da71d3c | broker-registrar/3.1.2  |
|                                  | cf-subway/3.1.0         |
|                                  | docker/0.30.0           |
+----------------------------------+-------------------------+
```

To target the Dingo Redis deployment:

```
bosh deployment $(ls -t /var/tempest/workspaces/default/deployments/dingo-redis-* | head -n1)
```

To poll for the health/vitals of Dingo Redis using the name above (using a small font and wide terminal window):

```
name=$(bosh deployments | grep dingo-redis- | awk '{print $2}')
bosh vms $name --vitals
```

The output's right hand side will show the utilization of RAM `Memory Usage` and persistent disk `Persistent Disk Usage`:

```
+-------------------------------------------------+---------+------------+------------+--------------+-----------------------+------+------+------+--------------+------------+------------+------------+------------+
| VM                                              | State   | AZ         | VM Type    | IPs          |         Load          | CPU  | CPU  | CPU  | Memory Usage | Swap Usage | System     | Ephemeral  | Persistent |
|                                                 |         |            |            |              | (avg01, avg05, avg15) | User | Sys  | Wait |              |            | Disk Usage | Disk Usage | Disk Usage |
+-------------------------------------------------+---------+------------+------------+--------------+-----------------------+------+------+------+--------------+------------+------------+------------+------------+
| broker/0 (240748ba-1c4d-4ed3-aec8-3a402b2ea7f2) | running | default-az | small.disk | 10.213.10.47 | 0.00, 0.00, 0.00      | 0.0% | 0.0% | 0.1% | 4% (72.0M)   | 0% (0B)    | 35%        | 0%         | 35%        |
| docker/0 (f9735ea7-f92f-40f1-8c89-12d6075ed1f0) | running | default-az | xlarge     | 10.213.10.48 | 0.00, 0.00, 0.00      | 0.0% | 0.0% | 0.0% | 2% (342.1M)  | 0% (0B)    | 35%        | 2%         | 1%         |
+-------------------------------------------------+---------+------------+------------+--------------+-----------------------+------+------+------+--------------+------------+------------+------------+------------+
```

You are primarily focused on the health of the `cell` VMs. This is where Redis servers are running inside Docker containers.

## Access Redis servers inside Docker containers

Use the `bosh` CLI to SSH into one of the `cell` VMs:

```
bosh ssh docker/0
```

To see the list of Docker containers running:

```
docker ps
```

The output might look like:

```
CONTAINER ID        IMAGE                COMMAND              CREATED             STATUS              PORTS                     NAMES
b2ceaf87d4a4        frodenas/redis:3.2   "/scripts/run.sh "   About an hour ago   Up About an hour    0.0.0.0:32772->6379/tcp   cf-f5adb5b4-a4d9-4dff-aafc-e88dbd5a8aeb
794f27736474        frodenas/redis:3.2   "/scripts/run.sh "   2 hours ago         Up 2 hours          0.0.0.0:32771->6379/tcp   cf-3f69dced-8d36-4e23-b9f2-a157a13e39dc
```

To see the health of all containers use http://ctop.sh/ which is preinstalled on each Docker host machine:

```
ctop
```
